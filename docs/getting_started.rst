Getting Started
################


Installation
-------------

Install using pip:


.. code-block:: bash

    pip install resgen-python

Logging in
----------

For now, we recommend storing your username and password in environment variables and using them to create a ``ResgenConnection``:

.. code-block:: python

  import os
  import resgen as rg

  rgc = rg.connect(
    os.getenv('RESGEN_USER'),
    os.getenv('RESGEN_PASSWORD')
  )

Projects
--------

Once logged in, all activity needs to take place within a project. This is managed by a ``ResgenProject`` object. The ``find_or_create_project`` function checks to see if a project exists for this user and returns it if it does or creates it if it doesn't.

.. code-block:: python

  project = rgc.find_or_create_project('My project')

Managing Data
-------------

Use ``sync_dataset`` to upload data to a project. This function will check if a dataset with this filename exists in the project and uploads the local file if it doesn't. If a dataset with an equivalent filename exists in the project, this command will simply return its uuid.

.. code-block:: python

  project.sync_dataset(
    'AdnpKO.1000.mcool',datatype="matrix", filetype="cooler", assembly="mm10"
  )

If the passed in dataset is a url, then it will first be downloaded and then added to the project. This may take some
time during which the dataset will appear to be there but
actually be incomplete.

Viewing Data
------------

To view a dataset, we typically need the dataset itself (see Managing Data above) as well as a location. Locations in genomic data typically consist of a chromosome and a position. Because HiGlass shows concatenated version of chromosomes, we need to convert genomic (chromosome, position) to "absolute" coordinates using a chromsizes file.

Using genomic coordinates
^^^^^^^^^^^^^^^^^^^^^^^^^

In resgen, these are typically datasets with ``datatype:chromsizes``. We can select one and create a ``ChromosomeInfo`` object. Note that these operations use the ``ResgenConnection`` (``rgc``) object because they are not project-specific. We also assume that the first dataset that is returned by ``find_datasets`` is the one we want to use. In practice, this should be verified before using.

.. code-block:: python

  chromsizes_mm10 = rgc.find_datasets(
    datatype='chromsizes', assembly='mm10'
  )[0]
  chrominfo = rgc.get_chrominfo(chromsizes_mm10)

With a ``chrominfo`` object, we can convert genomic coordinates to absolute coordinates:

.. code-block:: python

  >> chrominfo.to_abs('chr8', 8.67e6)
  1149815680.0

This will come in handy when we make interactive figures centered on a particular region.

Creating interactive figures
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Datasets can be interactively viewed using the `higlass-python <https://docs-python.higlass.io>`_ package. An example can be seen below:

.. code-block:: python

  import higlass
  from higlass.client import View

  initialXDomain = [
      chrominfo.to_abs('chr8', 8.67e6),
      chrominfo.to_abs('chr8', 14.85e6)
  ]

  view1 = View([
      ds_dict['AdnpKO.1000.mcool'].hg_track(height=300),
  ], initialXDomain=initialXDomain, x=0, width=6)
  view2 = View([
      ds_dict['WT.1000.mcool'].hg_track(height=300),
  ], initialXDomain=initialXDomain, x=6, width=6)


  display, server, viewconf = higlass.display([view1, view2])
  display

Saving Figures
--------------

Interactive figures can be saved to a project using a ``higlass-python`` - generated viewconf. Note that the figure will be re-rendered and may not look exactly like the one generated by the HiGlass Jupyter widget. For finer control over figure quality, use the resgen web interface.

.. code-block:: python

  project.save_viewconf(viewconf, "Figure 1D")

To export the figure as SVG or PNG, use the config menu in one of the higlass view headers.

